## ZRAM

You may use ZRAM for swap on compressed RAM portion or to mount a partition on compressed RAM.
Swap on zram can improve performance and reduce disk IO wearout (useful for embedded systems). 

Example script and systemd service file follow below. 
As an example, the script that manages the zram setup will restore and backup the mysql data to/from the zram partition back to/from the disk. 
Watchout though, since this approach may render your DB currupt in case of abrupt power losses. 
You may amend the script to fit your needs (size, compression. etc):

cat /usr/local/bin/zram-mysql
#!/bin/bash

# Path
PATH="/bin:/sbin:/usr/bin:/usr/sbin"

FRACTION=50
MEMORY=$(perl -ne '/^MemTotal:\s+(\d+)/ && print $1*1024' < /proc/meminfo)
CPUS=$(nproc)
SIZE=$((MEMORY * FRACTION / 100))
MEMLIMIT=$((SIZE * 2))

restore() {
    echo "Syncing disk to zram" >> /var/log/zram
    tar xzf /var/lib/mysql.tgz -C /var/tmp/mysql/ &>/dev/null
    echo "Disk synced with zram" >> /var/log/zram
}

backup() {
    echo "Syncing zram to disk" >> /var/log/zram
    cd /var/tmp/mysql/
    tar czf /var/lib/mysql.tgz . &>/dev/null
    cd /tmp/
    echo "Zram synced to disk" >> /var/log/zram
}

case "$1" in
    start)
        param=$(modinfo zram | grep num_devices | cut -f2 -d: | tr -d ' ')
        modprobe zram $param=$CPUS
        echo lz4 > /sys/block/zram0/comp_algorithm
        echo $SIZE > /sys/block/zram0/disksize
        echo $MEMLIMIT > /sys/block/zram0/mem_limit
        mkfs.ext4 /dev/zram0 &>/dev/null
        mount /dev/zram0 /var/tmp/mysql &>/dev/null
    restore;
        ;;
    stop)
    backup;
        wait
        umount /var/tmp/mysql
        wait
        sleep .5
        modprobe --remove zram
        ;;
    *)
        echo "Usage: $(basename $0) (start | stop)"
        exit 1
        ;;
esac

cat /etc/systemd/system/zram-mysql.service
[Unit]
Description=zram-mysql
ConditionPathExists=/var/lib/mysql.tgz
Requires=local-fs.target
Before=mysql.service
After=local-fs.target

[Service]
Type=forking
ExecStart=/usr/local/bin/zram-mysql start
ExecStop=/usr/local/bin/zram-mysql stop
TimeoutSec=10
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target

## Useful commands:
systemctl list-dependencies --after local-fs.target
mkswap --label 'zram swap parition' /dev/zram0
swapon --priority 10 /dev/zram0
systemctl daemon-reload



### Swap on zram: 

Systemd script: `/etc/systemd/system/zram.service`
```
[Unit]
Description=zram swap

Requires=local-fs.target
After=local-fs.target

[Service]
Type=forking
ExecStart=/usr/local/bin/zram start
ExecStop=/usr/local/bin/zram stop
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target 

```

ZRAM script: `/usr/local/bin/zram`
```
#!/bin/bash
###########################
# Author: A. Kaouris
# Revision Date: 09/05/2019
###########################

# Path
PATH="/bin:/sbin:/usr/bin:/usr/sbin"

# Sizing
FRACTION=75
MEMORY=$(perl -ne '/^MemTotal:\s+(\d+)/ && print $1*1024' < /proc/meminfo)
CPUS=$(nproc)
SIZE=$((MEMORY * FRACTION / 100 / CPUS))
MEMLIMIT=$((SIZE * 2))
# Compression: lzo or lz4
COMP=lz4

case "$1" in
    start)
        param=$(modinfo zram | grep num_devices | cut -f2 -d: | tr -d ' ')
        modprobe zram $param=$CPUS

        for n in $(seq $CPUS)
        do
            i=$((n - 1))
            echo $COMP > /sys/block/zram$i/comp_algorithm
            echo $SIZE > /sys/block/zram$i/disksize
            echo $MEMLIMIT > /sys/block/zram$i/mem_limit
            mkswap /dev/zram$i
            swapon /dev/zram$i --priority 10
        done
        ;;
    stop)
        for n in $(seq $CPUS)
        do
            i=$((n - 1))
            swapoff /dev/zram$i && echo "zram: disabled disk $n of $CPUS" &
        done
        wait
        sleep .5
        modprobe --remove zram
        ;;
    *)
        echo "Usage: $(basename $0) (start | stop)"
        exit 1
        ;;
esac

exit 0
```
Enable the service: 
```
chmod +x /usr/local/bin/zram
systemctl daemon-reload
systemctl enable zram
systemctl start zram
systemctl status zram
```

## Useful Links:
https://www.digitalocean.com/community/tutorials/how-to-configure-periodic-trim-for-ssd-storage-on-linux-servers
https://www.kernel.org/doc/Documentation/blockdev/zram.txt
https://www.shellhacks.com/systemd-service-file-example/
https://docs.observium.org/persistent_ramdisk/
